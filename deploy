#!/bin/bash
# requires npm, neovim, tmux, zsh

write_pathmunge () {
    # only append to path if not set
    # 1 path to bin 
    # 2 file
    # 2 expend path "before" or "after"

    # set default place: after
    if [ -z "$3" ]
    then
        place=$3
    else
        place="after"
    fi

    # check if set in file 
	if  !  grep -Fxq $1 $2 ; then
        # write if statement which check if set in PATH
        echo "if ! echo \$PATH | /bin/egrep -q \"(^|:)$1($|:)\" ; then" >> $2
            if [ "$place" = "after" ] ; then
                echo "    export PATH=\$PATH:"$1 >> $2
            else
                echo "    export PATH=$1:\$PATH:" >> $2
            fi
        echo fi >> $2
    fi
    # set PATH for skript if not set before
    if ! echo $PATH | /bin/egrep -q "(^|:)$1($|:)" ; then
        if [ "$place" = "after" ] ; then
            PATH=$PATH:$1
         else
            PATH=$1:$PATH
        fi
    fi
}

if ! command -v nvim &> /dev/null; then
    echo "nvim not found, use default installation"
    NVIM_HOME="$HOME/.modules/neovim"
    # neovim form source with no root
    PATH=$PATH:$NVIM_HOME/bin/
fi

if ! command -v npm &> /dev/null; then
    # nvm environment variables
    echo "npm not found, use default installation"
	export NVM_DIR="$HOME/.modules/node"
	NODE_VERSION=14.15.0
    bash $NVM_DIR/nvm.sh # this loads nvm
    export $PATH=$PATH:${NVM_DIR}/versions/node/v${NODE_VERSION}/bin/
	export NODE_PATH=${NVM_DIR}/v{$NODE_VERSION}/lib/node_modules/
    source $HOME/.bashrc
fi

echo "path ${PATH}"

check_default_shell_root() {
    echo "setup defualt shell root"
    if [ -z "${SHELL##*zsh*}" ] ;then
        echo "Default shell is zsh."
    else
        echo -n "Default shell is not zsh. Do you want to chsh -s \$(which zsh)? (y/n)"
        old_stty_cfg=$(stty -g)
        stty raw -echo
        answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
        stty $old_stty_cfg && echo
        if echo "$answer" | grep -iq "^y" ;then
            chsh -s $(which zsh)
        else
            echo "Warning: Your configuration won't work properly. If you exec zsh, it'll exec tmux which will exec your default shell which isn't zsh."
        fi
    fi
}

check_default_shell() {
    echo "setup defualt shell no root"
    if [ -z "${SHELL##*zsh*}" ] ;then
            echo "Default shell is zsh."
    else
        touch ~/.bash_profile
        if grep -Fxq "SHELL" ~/.bash_profile; then
            echo "SHELL in pash_profile"
        else
            echo "ADDING ZSH SHELL pash_profile"
            export SHELL=`which zsh`
            echo "export SHELL="$SHELL >> ~/.bash_profile
            echo "exec "$SHELL >> ~/.bash_profile
            touch ~/.profile
            echo "export SHELL="$SHELL >> ~/.profile
            echo "[ -z "$ZSH_VERSION" ] && exec $SHELL -l" >> ~/.profile #
            echo "source .zshrc" >> ~/.profile #
        fi #
    fi #
} #

install_tmux_plugin_manager() {
    echo "install tmux plugin manager"
    #if [ -z "${SHELL##*zsh*}" ] ;then
    if [ ! -d ~/.tmux/plugins/tpm ]; then
            echo "Default shell is zsh."
        echo "installing tmux plugin"
        git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
        # Initialize TMUX plugin manager is done in dotfiles 
    else
        echo "tmux plugin was installed"
    fi #
} #

install_nvim_plugin_manager() {
    echo "nvim installing plug"
    if [ ! -f ~/.local/share/nvim/site/autoload/plug.vim ]; then
        sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
               https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

    else
        echo "nvim plug plugin was installed"
    fi #
}

install_zsh_plugin_manager() {
    echo "zsh plugin manager installing plug"
	#ANT_DIR=~/.modules/antigen/antigen.zsh
	#export ZPLUG_HOME=~/.zplug
    #if [ ! -d $ZPLUG_HOME ]; then
        #echo "zsh plugin install to $ZPLUG_HOME"
		##curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
		#git clone https://github.com/zplug/zplug $ZPLUG_HOME
		##write_pathmunge $ZPLUG_HOME ~/.zshrc
		#eval $ZPLUG_HOME/init.zsh
    #else
        #echo "zsh plug plugin was installed"
    #fi #
    # install zinit plugin manager to ~/.zinit/bin
    #sh -c "$(curl -fsSL https://raw.githubusercontent.com/zdharma/zinit/master/doc/install.sh)"
    export ZINK_HOME=~/.zinit/bin
    if [ ! -d $ZINK_HOME ]; then
        echo "zsh plugin install to $ZINK_HOME"
        #curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh | zsh
        #mkdir $ZINK_HOME
        git clone https://github.com/zdharma/zinit.git $ZINK_HOME
        #write_pathmunge $ZPLUG_HOME ~/.zshrc
        eval $ZINK_HOME/bin/zinit.zsh
    else
        echo "zsh zink plugin was installed"
    fi #

}

setup_dotfiles() {
    echo "setup for dotfile path: nvim, tmux, zsh "

    # backup old files
    #[ ! -f ~/.zshrc ] && mv ~/.zshrc ~/.zshrc.old
    #[ ! ~/.tmux.conf ] && mv ~/.tmux.conf ~/.tmux.conf.old

	if [ ! -f ~/.config/nvim/init.vim ]; then
		# no nvim conf 
		mkdir -p ~/.config/nvim/
		touch ~/.config/nvim/init.vim
	fi 

	if grep -Fxq "so $HOME/dotfiles/nvim/init.vim" ~/.config/nvim/init.vim
	then
        echo "dotfiles was deployed"
	else
		if [ ! -f ~/.tmux.conf ]; then
			# no tmux conf
			touch ~/.tmux.conf
		else
			echo "create tmux conf backup"
			mv ~/.tmux.conf ~/.tmux.conf.old
		fi #
		if [ -f ~/.config/nvim/init.vim ]; then
			echo "create nvim init backup"
			mv ~/.config/nvim/init.vim ~/.config/nvim/init.vim.old
		fi #

		# only append to nvim config file,  
		printf "source '$HOME/dotfiles/zsh/zshrc_manager.sh'\n" >> ~/.zshrc
		# overwrite
		printf "source-file $HOME/dotfiles/tmux/tmux.conf" > ~/.tmux.conf
		printf "so $HOME/dotfiles/nvim/init.vim" > ~/.config/nvim/init.vim
    fi
}

#check_default_shell
check_default_shell 
install_tmux_plugin_manager
install_nvim_plugin_manager
install_zsh_plugin_manager
setup_dotfiles

if command -v zplug &> /dev/null
then
    zplug install
else
    echo "ERROR zplug not found"
fi

# Initialize TMUX plugin manager is done in dotfiles 
tmux source ~/.tmux.conf

echo "[step 3] installing node.js packages: neovim and yarn"

if command -v npm &> /dev/null
then
    zplug install
    npm install -g neovim yarn
else
    echo "ERROR npm not found"
fi
#npm install -g neovim yarn

# 4. install Plug

# 5. install plugins via Plug
echo "[step 5] installing plugins"
if [[ ! -d $HOME/.config/nvim ]]; then
    mkdir -p $HOME/.config/nvim
fi
#if [[ ! -f $HOME/.config/nvim/init.vim ]]; then
    #wget https://gist.githubusercontent.com/wsntxxn/5bbe7856a472985d82f62e1b0895ce60/raw/fc7db25e1af2b9dae8969021c52c21ce06be3bb5/init.vim -P $HOME/.config/nvim/
#fi

nvim +'PlugInstall --sync' +qa

# 6. install packages via pip
echo "[step 6] installing python packages: neovim"
#pip install --user neovim notedown
# TODO https://www.hassanaskary.com/vim/conda/python/2020/04/27/how-to-setup-neovim-with-python-provider-using-conda.html
pip3 install --user neovim pynvim pep8 flake8 pyflakes pylint isort jedi mypy ptpython
#pip install --user neovim pynvim pep8 flake8 pyflakes pylint isort jedi mypy

# 7. postprocessing for semshi
echo "[step 7] post processing step for installing semshi"
nvim +'UpdateRemotePlugins' +qa 

# 8. install coc plugins
echo "[step 8] installing coc plugins"
#nvim +'CocInstall coc-python coc-json coc-jedi'
nvim +'CocInstall coc-sh coc-json coc-pyright coc-yaml coc-yank coc-vimlsp coc-highlight coc-snippets'


echo "deploy finished"

